<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel de Leads Interativo - Revive</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    
    <!-- Bibliotecas para gerar PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .loader {
            border: 4px solid #d1d5db;
            border-top: 4px solid #818cf8; /* brand-primary-light */
            border-radius: 50%;
            width: 32px;
            height: 32px;
            animation: spin 1.5s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .header-bg {
            background-color: #6366f1; /* brand-primary */
            clip-path: polygon(0 0, 100% 0, 100% 90%, 0 100%);
            padding-bottom: 5rem; 
        }
    </style>
    <script>
        // Customizing Tailwind with your brand colors
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-primary': '#6366f1', // Lilás principal do logo
                        'brand-primary-light': '#818cf8',
                        'brand-primary-dark': '#4f46e5',
                        'brand-secondary': '#f4f4f5', // Um cinza bem claro
                        'brand-text': '#374151', // Cinza escuro para texto
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-slate-100 text-slate-700">

    <div class="relative">
        <!-- Header with brand style -->
        <div class="header-bg relative z-10">
            <div class="container mx-auto p-4 md:p-8">
                 <header class="flex flex-wrap justify-between items-center gap-4">
                    <div>
                        <h1 class="text-3xl font-bold text-white">ReVive Leads Digitais</h1>
                        <p class="text-indigo-200">Painel de Análise de Desempenho</p>
                    </div>
                     <div class="flex items-center gap-4">
                        <button id="strategic-analysis-btn" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 transition-colors">
                            ✨ Análise Estratégica
                        </button>
                        <button id="consultant-helper-btn" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 transition-colors">
                            ✨ Ajuda Consultor
                        </button>
                        <a href="https://revivemarketing.github.io/Tarefas-pendencias/" target="_blank" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg transition-colors">TAREFA</a>
                         <button id="refresh-btn" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 110 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" /></svg>
                            Atualizar
                        </button>
                    </div>
                </header>
            </div>
        </div>

        <div class="container mx-auto p-4 md:p-8 -mt-20 relative z-20">
            <!-- Seção de Filtros -->
            <div class="bg-white p-5 rounded-xl shadow-md mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-slate-700">Filtros e Período</h3>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end">
                    <div>
                        <label for="filter-consultor" class="block text-sm font-medium text-slate-600 mb-1">Consultor</label>
                        <select id="filter-consultor" class="w-full bg-slate-50 border-slate-300 rounded-lg px-3 py-2 text-slate-700 focus:outline-none focus:ring-2 focus:ring-brand-primary-light">
                            <option value="">Todos os Consultores</option>
                        </select>
                    </div>
                    <div>
                        <label for="filter-situacao" class="block text-sm font-medium text-slate-600 mb-1">Situação</label>
                        <select id="filter-situacao" class="w-full bg-slate-50 border-slate-300 rounded-lg px-3 py-2 text-slate-700 focus:outline-none focus:ring-2 focus:ring-brand-primary-light">
                            <option value="">Todas as Situações</option>
                        </select>
                    </div>
                    <div>
                        <label for="start-date" class="block text-sm font-medium text-slate-600 mb-1">De:</label>
                        <input type="date" id="start-date" class="w-full bg-slate-50 border-slate-300 rounded-lg px-3 py-2 text-slate-700">
                    </div>
                    <div>
                        <label for="end-date" class="block text-sm font-medium text-slate-600 mb-1">Até:</label>
                        <input type="date" id="end-date" class="w-full bg-slate-50 border-slate-300 rounded-lg px-3 py-2 text-slate-700">
                    </div>
                    <div class="flex justify-end gap-3 lg:col-span-4">
                        <button id="clear-filter-btn" class="bg-slate-200 hover:bg-slate-300 text-slate-700 font-bold py-2 px-4 rounded-lg transition-colors">Limpar</button>
                        <button id="filter-btn" class="bg-brand-primary hover:bg-brand-primary-dark text-white font-bold py-2 px-6 rounded-lg transition-colors flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clip-rule="evenodd" /></svg>
                            Filtrar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Seção de Métricas (KPIs) -->
            <div id="kpi-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <!-- Os cards de KPI serão inseridos aqui pelo JavaScript -->
            </div>
            
            <!-- Seção de Gráficos -->
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-6 mb-8">
                <!-- CARD ALTERADO: LEADS POR SITUAÇÃO -->
                <div class="bg-white p-6 rounded-xl shadow-md lg:col-span-3 border-t-4 border-indigo-500">
                    <h2 class="text-xl font-bold mb-4 text-slate-800">Leads por Situação</h2>
                    <!-- A altura foi aumentada para acomodar melhor o gráfico de barras -->
                    <div class="relative h-96">
                        <canvas id="statusChart"></canvas>
                    </div>
                </div>
                <!-- FIM DA ALTERAÇÃO -->
                <div class="bg-white p-6 rounded-xl shadow-md lg:col-span-2 border-t-4 border-indigo-500">
                    <h2 class="text-xl font-bold mb-4 text-slate-800">Leads por Indicação</h2>
                     <div class="relative h-72 w-full mx-auto" style="max-width: 350px;">
                        <canvas id="sourceChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="bg-white p-6 rounded-xl shadow-md mb-8 border-t-4 border-indigo-500">
                <h2 class="text-xl font-bold mb-4 text-slate-800">Eficácia da Fonte de Leads</h2>
                <div class="relative h-64">
                    <canvas id="sourceConversionChart"></canvas>
                </div>
            </div>

            <!-- Tabela de Leads -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden border-t-4 border-indigo-500">
                 <div class="p-4 border-b border-gray-200 flex flex-wrap justify-between items-center gap-4">
                    <div class="flex items-center gap-4">
                        <h2 class="text-xl font-bold text-slate-800">Lista de Leads</h2>
                        <span id="table-results-count" class="text-sm text-gray-500"></span>
                    </div>
                    <!-- CAMPO DE BUSCA ADICIONADO AQUI -->
                    <div class="relative">
                        <input type="text" id="search-contact" placeholder="Buscar por contato..." class="w-full sm:w-64 bg-slate-50 border-slate-300 rounded-lg pl-10 pr-4 py-2 text-slate-700 focus:outline-none focus:ring-2 focus:ring-brand-primary-light">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" /></svg>
                        </div>
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full text-left">
                        <thead class="bg-slate-100 border-b-2 border-slate-200">
                            <tr>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-left">Data</th>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-left">Consultor</th>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-left">Indicação</th>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-left">Situação</th>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-left">Contato</th>
                                <th class="p-4 text-sm font-semibold text-slate-600 uppercase tracking-wider text-center">Ações</th>
                            </tr>
                        </thead>
                        <tbody id="leads-table-body" class="divide-y divide-slate-200">
                        </tbody>
                    </table>
                     <div id="loading-state" class="text-center p-8 text-gray-500">
                        <div class="loader mx-auto mb-4"></div>
                        <p>A carregar dados da planilha...</p>
                    </div>
                     <div id="no-results" class="text-center p-8 text-gray-500 hidden">
                        <p>Nenhum lead encontrado com os filtros aplicados.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modals -->
    <div id="observation-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white rounded-lg shadow-2xl p-6 w-full max-w-2xl transform transition-all">
            <h2 class="text-2xl font-bold mb-4 text-brand-text">Observações do Lead</h2>
            <div id="observation-content" class="bg-gray-100 rounded-lg p-4 text-gray-700 whitespace-pre-wrap max-h-48 overflow-y-auto"></div>
            
            <div class="mt-4 pt-4 border-t border-gray-200">
                <div class="flex items-center gap-4 mb-4 flex-wrap">
                    <button id="summarize-btn" class="bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg flex items-center gap-2 text-sm transition-colors">
                        ✨ Resumir
                    </button>
                    <button id="suggest-btn" class="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg flex items-center gap-2 text-sm transition-colors">
                        ✨ Sugerir Próximo Passo
                    </button>
                </div>
                <div id="gemini-result-container" class="bg-gray-50 rounded-lg p-4 hidden min-h-[80px]">
                    <div id="gemini-loader" class="hidden mx-auto w-8 h-8">
                        <div class="loader"></div>
                    </div>
                    <div id="gemini-result-content" class="text-gray-700 whitespace-pre-wrap prose"></div>
                </div>
            </div>

            <div class="flex justify-end mt-6">
                <button id="close-observation-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded-lg transition-colors">Fechar</button>
            </div>
        </div>
    </div>

    <div id="strategic-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white rounded-lg shadow-2xl p-6 w-full max-w-3xl transform transition-all max-h-[90vh] flex flex-col">
            <h2 class="text-2xl font-bold mb-4 text-brand-text">Análise Estratégica dos Leads</h2>
            <p class="text-gray-500 mb-4">A IA analisou todos os leads atuais para fornecer os seguintes insights.</p>
            <div id="strategic-content" class="bg-gray-100 rounded-lg p-4 text-gray-700 whitespace-pre-wrap overflow-y-auto flex-grow">
                <div id="strategic-loader" class="hidden mx-auto w-8 h-8">
                    <div class="loader"></div>
                </div>
                <div id="strategic-result-content" class="text-gray-700 whitespace-pre-wrap prose"></div>
            </div>
            <div class="flex justify-between items-center mt-6">
                <button id="export-pdf-btn" class="bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd" /></svg>
                    Exportar para PDF
                </button>
                <button id="close-strategic-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded-lg transition-colors">Fechar</button>
            </div>
        </div>
    </div>

    <!-- Modal Ajuda Consultor -->
    <div id="consultant-helper-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white rounded-lg shadow-2xl p-6 w-full max-w-3xl transform transition-all max-h-[90vh] flex flex-col">
            <h2 class="text-2xl font-bold mb-2 text-brand-text">Assistente de Vendas IA</h2>
            <p class="text-gray-500 mb-4">Cole a dúvida ou o cenário do seu cliente abaixo para receber uma sugestão de abordagem.</p>
            
            <textarea id="consultant-query-input" class="w-full h-32 bg-gray-50 border border-gray-300 rounded-lg p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-brand-primary-light" placeholder="Ex: O cliente acha que o processo do INSS é muito demorado e não vale a pena. O que eu respondo?"></textarea>
            
            <div class="my-4">
                <button id="get-suggestion-btn" class="bg-brand-primary hover:bg-brand-primary-dark text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 transition-colors">
                    Gerar Sugestão
                </button>
            </div>

            <div id="consultant-helper-content" class="bg-gray-100 rounded-lg p-4 text-gray-700 whitespace-pre-wrap overflow-y-auto flex-grow min-h-[150px]">
                <div id="consultant-helper-loader" class="hidden mx-auto w-8 h-8">
                    <div class="loader"></div>
                </div>
                <div id="consultant-helper-result-content" class="text-gray-700 whitespace-pre-wrap prose"></div>
            </div>

            <div class="flex justify-end mt-6">
                <button id="close-consultant-helper-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded-lg transition-colors">Fechar</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- CONFIGURAÇÕES DAS APIS ---
            const GOOGLE_SHEETS_API_KEY = 'AIzaSyAx8GJ2p-HNzwJwPljcgKS0QDNmJuy7NZE';
            const SPREADSHEET_ID = '15G9YGn6BJ89bpx6MkZBhOiRiwiSPOX3qZ4A8SQvf1Wg';
            const SHEET_NAMES = ['SETEMBRO', 'OUTUBRO']; 
            const RANGE_ADDRESS = 'A2:H';
            
            // CHAVE DA API FINAL E CORRETA
            const GEMINI_API_KEY = "AIzaSyAsUvZVex5i7qOyhGMECZZ0nQ9_VcFihK0"; 

            let leads = []; 
            let currentLeadInView = null;

            // --- ELEMENTOS DO DOM ---
            const tableBody = document.getElementById('leads-table-body');
            const kpiContainer = document.getElementById('kpi-container');
            const filterConsultor = document.getElementById('filter-consultor');
            const filterSituacao = document.getElementById('filter-situacao');
            const startDateInput = document.getElementById('start-date');
            const endDateInput = document.getElementById('end-date');
            const filterBtn = document.getElementById('filter-btn');
            const clearFilterBtn = document.getElementById('clear-filter-btn');
            const noResultsDiv = document.getElementById('no-results');
            const loadingStateDiv = document.getElementById('loading-state');
            const tableResultsCount = document.getElementById('table-results-count');
            const refreshBtn = document.getElementById('refresh-btn');
            const searchContactInput = document.getElementById('search-contact');
            
            // Modal de Observação
            const observationModal = document.getElementById('observation-modal');
            const observationContent = document.getElementById('observation-content');
            const closeObservationBtn = document.getElementById('close-observation-btn');
            const summarizeBtn = document.getElementById('summarize-btn');
            const suggestBtn = document.getElementById('suggest-btn');
            const geminiResultContainer = document.getElementById('gemini-result-container');
            const geminiLoader = document.getElementById('gemini-loader');
            const geminiResultContent = document.getElementById('gemini-result-content');

            // Modal de Análise Estratégica
            const strategicModal = document.getElementById('strategic-modal');
            const closeStrategicBtn = document.getElementById('close-strategic-btn');
            const strategicAnalysisBtn = document.getElementById('strategic-analysis-btn');
            const strategicLoader = document.getElementById('strategic-loader');
            const strategicResultContent = document.getElementById('strategic-result-content');
            const exportPdfBtn = document.getElementById('export-pdf-btn');

            // Modal de Ajuda ao Consultor
            const consultantHelperBtn = document.getElementById('consultant-helper-btn');
            const consultantHelperModal = document.getElementById('consultant-helper-modal');
            const closeConsultantHelperBtn = document.getElementById('close-consultant-helper-btn');
            const getSuggestionBtn = document.getElementById('get-suggestion-btn');
            const consultantQueryInput = document.getElementById('consultant-query-input');
            const consultantHelperContent = document.getElementById('consultant-helper-content');
            const consultantHelperLoader = document.getElementById('consultant-helper-loader');
            const consultantHelperResultContent = document.getElementById('consultant-helper-result-content');


            // Gráficos
            let statusChartInstance, sourceChartInstance, sourceConversionChartInstance;

            // --- FUNÇÕES ---
            const callGeminiAPI = async (prompt, resultContainer, loaderElement, contentElement) => {
                if (!GEMINI_API_KEY) {
                    contentElement.textContent = 'Erro: A chave da API Gemini não foi configurada.';
                    return;
                }
                resultContainer.classList.remove('hidden');
                loaderElement.classList.remove('hidden');
                contentElement.innerHTML = '';

                // URL DA API E NOME DO MODELO CORRIGIDOS
                const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-1.0-pro:generateContent?key=${GEMINI_API_KEY}`;
                
                const payload = { contents: [{ parts: [{ text: prompt }] }] };
                try {
                    const response = await fetch(GEMINI_API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error?.message || 'A resposta da API não foi bem-sucedida.');
                    }
                    const data = await response.json();
                    const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
                    if (text) {
                        contentElement.innerHTML = marked.parse(text);
                    } else {
                        const blockReason = data.candidates?.[0]?.finishReason;
                        if (blockReason && blockReason !== "STOP") {
                           throw new Error(`A resposta foi bloqueada. Motivo: ${blockReason}. Verifique as configurações de segurança da sua chave de API.`);
                        } else {
                           throw new Error('Não foi possível extrair o texto da resposta da API.');
                        }
                    }
                } catch (error) {
                    console.error("Erro ao chamar a API Gemini:", error);
                    contentElement.textContent = `Ocorreu um erro: ${error.message}`;
                } finally {
                    loaderElement.classList.add('hidden');
                }
            };
            
            const parseDate = (dateString) => {
                if (!dateString || !/^\d{2}\/\d{2}\/\d{4}$/.test(dateString)) return null;
                const [day, month, year] = dateString.split('/');
                return new Date(year, month - 1, day);
            };
            
            const fetchSheetData = async () => {
                loadingStateDiv.classList.remove('hidden');
                tableBody.innerHTML = '';
                noResultsDiv.classList.add('hidden');
                try {
                    const urls = SHEET_NAMES.map(sheetName => {
                        const fullRange = `'${sheetName}'!${RANGE_ADDRESS}`;
                        return `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${encodeURIComponent(fullRange)}?key=${GOOGLE_SHEETS_API_KEY}`;
                    });
                    const responses = await Promise.all(urls.map(url => fetch(url)));
                    for (const response of responses) {
                        if (!response.ok) {
                            const errorData = await response.json();
                            const errorMessage = errorData.error?.message || `Erro na API: ${response.status} ${response.statusText}`;
                            throw new Error(errorMessage);
                        }
                    }
                    const jsonPromises = responses.map(response => response.json());
                    const results = await Promise.all(jsonPromises);
                    const sheetValues = results.flatMap(data => data.values || []);

                    if (sheetValues.length === 0) {
                        leads = [];
                        updateDashboard(leads);
                        return;
                    }

                    leads = sheetValues.map((row, index) => ({
                        id: index + 1,
                        data: row[0] || '',
                        consultor: (row[1] || '').trim().toUpperCase(),
                        indicacao: row[2] || '',
                        situacao: row[4] || 'Não definido',
                        contato: row[5] || '',
                        observacao: row[6] || '',
                        dataFechamento: row[7] || '',
                        dateObject: parseDate(row[0]),
                        dateObjectFechamento: parseDate(row[7])
                    }))
                    .filter(lead => lead.consultor && lead.dateObject) 
                    .sort((a, b) => b.dateObject - a.dateObject); 

                    populateConsultantFilter(leads);
                    populateSituationFilter(leads);

                } catch (error) {
                    console.error("Falha ao buscar dados da planilha:", error);
                    loadingStateDiv.innerHTML = `<p class="text-red-500">Erro ao carregar dados: ${error.message}. <br>Verifique se a Chave de API é válida, se a API do Google Sheets está ativa e se as planilhas estão partilhadas publicamente.</p>`;
                } finally {
                     loadingStateDiv.classList.add('hidden');
                }
            };

            const populateConsultantFilter = (data) => {
                const consultants = [...new Set(data.map(lead => lead.consultor))];
                filterConsultor.innerHTML = '<option value="">Todos os Consultores</option>';
                consultants.sort().forEach(c => {
                    const option = document.createElement('option');
                    option.value = c;
                    option.textContent = c;
                    filterConsultor.appendChild(option);
                });
            };
            
            const populateSituationFilter = (data) => {
                const situations = [...new Set(data.map(lead => lead.situacao))];
                filterSituacao.innerHTML = '<option value="">Todas as Situações</option>';
                situations.sort().forEach(sit => {
                    const option = document.createElement('option');
                    option.value = sit;
                    option.textContent = sit;
                    filterSituacao.appendChild(option);
                });
            };

            const getStatusColor = (status) => {
                const lowerStatus = (status || '').toLowerCase().trim();
                switch (lowerStatus) {
                    case 'negociação': return 'bg-pink-500 text-white';
                    case 'fechado': return 'bg-green-600 text-white';
                    case 'sem possibilidade': return 'bg-red-600 text-white';
                    case 'duvida': return 'bg-blue-400 text-gray-900';
                    case 'letalk - negociação': return 'bg-purple-500 text-white';
                    case 'letalk - sem possibilidade': return 'bg-red-400 text-gray-900';
                    case 'letalk - fechado': return 'bg-green-400 text-gray-900';
                    case 'letalk - duvida': return 'bg-sky-400 text-gray-900';
                    case 'letalk': return 'bg-yellow-400 text-gray-900';
                    case 'aguardando resposta': return 'bg-gray-500 text-white';
                    default:
                        if (lowerStatus.includes('negocia')) return 'bg-yellow-500 text-gray-900';
                        if (lowerStatus.includes('sem possib')) return 'bg-red-500 text-white';
                        if (lowerStatus.includes('fechado')) return 'bg-green-500 text-white';
                        return 'bg-gray-600 text-white';
                }
            };
            
            const getStatusChartColor = (status) => {
                const lowerStatus = (status || '').toLowerCase().trim();
                switch (lowerStatus) {
                    case 'negociação': return '#ec4899';
                    case 'fechado': return '#16a34a';
                    case 'sem possibilidade': return '#dc2626';
                    case 'duvida': return '#60a5fa';
                    case 'letalk - negociação': return '#a855f7';
                    case 'letalk - sem possibilidade': return '#f87171';
                    case 'letalk - fechado': return '#4ade80';
                    case 'letalk - duvida': return '#38bdf8';
                    case 'letalk': return '#facc15';
                    case 'aguardando resposta': return '#6b7280';
                    default: return '#4b5563';
                }
            };

            const renderKpis = (data) => {
                const totalLeads = data.length;
                const emNegociacao = data.filter(l => (l.situacao || '').toLowerCase().includes('negocia')).length;
                const convertidos = data.filter(l => (l.situacao || '').toLowerCase().includes('fechado')).length;
                const perdidos = data.filter(l => (l.situacao || '').toLowerCase().includes('sem possib')).length;
                
                const conversionRate = totalLeads > 0 ? (convertidos / totalLeads) * 100 : 0;
                
                const leadsFechadosComData = data.filter(l => (l.situacao || '').toLowerCase().includes('fechado') && l.dateObject && l.dateObjectFechamento);
                let cicloVendasMedio = 0;
                if (leadsFechadosComData.length > 0) {
                    const totalDias = leadsFechadosComData.reduce((acc, lead) => {
                        const diffTime = Math.abs(lead.dateObjectFechamento - lead.dateObject);
                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                        return acc + (diffDays > 0 ? diffDays : 1);
                    }, 0);
                    cicloVendasMedio = totalDias / leadsFechadosComData.length;
                }
                
                let conversionColor = 'text-red-500';
                if (conversionRate >= 6) {
                    conversionColor = 'text-green-500';
                } else if (conversionRate >= 5) {
                    conversionColor = 'text-yellow-500';
                }
                
                 const kpis = [
                    { type: 'card', label: 'Total de Leads', value: totalLeads, color: 'text-indigo-600', filterValue: '', icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283-.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm-9 3a2 2 0 11-4 0 2 2 0 014 0z" /></svg>' },
                    { type: 'card', label: 'Em Negociação', value: emNegociacao, color: 'text-amber-600', filterValue: 'negocia', icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" /></svg>' },
                    { type: 'card', label: 'Leads Convertidos', value: convertidos, color: 'text-green-600', filterValue: 'fechado', icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' },
                    { type: 'card', label: 'Leads Perdidos', value: perdidos, color: 'text-red-600', filterValue: 'sem possib', icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" /></svg>' },
                    { type: 'rate', label: 'Taxa de Conversão', value: `${conversionRate.toFixed(1)}%`, color: conversionColor, icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" /></svg>' },
                    { type: 'cycle', label: 'Ciclo de Vendas (dias)', value: cicloVendasMedio.toFixed(1), color: 'text-cyan-600', icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>' }
                ];
                
                kpiContainer.innerHTML = kpis.map(kpi => {
                    const cardClasses = "bg-white p-5 rounded-xl shadow-md hover:shadow-lg hover:-translate-y-1 transition-all duration-300 flex items-start gap-4";
                    const cursorClass = kpi.type === 'card' ? 'cursor-pointer' : '';

                    return `<div class="${cardClasses} ${cursorClass}" ${kpi.type === 'card' ? `data-filter-value="${kpi.filterValue}"` : ''}>
                                <div class="flex-shrink-0">${kpi.icon || ''}</div>
                                <div>
                                    <h3 class="text-sm font-medium text-slate-500">${kpi.label}</h3>
                                    <p class="text-3xl font-bold mt-1 ${kpi.color}">${kpi.value}</p>
                                </div>
                            </div>`;
                }).join('');
            };

            const renderCharts = (data) => {
                const tooltipPercentage = { callbacks: { label: (c) => `${c.label}: ${c.raw.toFixed(1)} (${((c.raw/c.chart.getDatasetMeta(0).total)*100).toFixed(1)}%)` } };
                
                // --- GRÁFICO DE SITUAÇÃO (BARRAS HORIZONTAIS) ---
                const statusCounts = data.reduce((acc, lead) => {
                    const situacao = lead.situacao || 'Não definido';
                    acc[situacao] = (acc[situacao] || 0) + 1;
                    return acc;
                }, {});

                // Ordena os dados para exibir as situações mais comuns no topo
                const sortedStatusEntries = Object.entries(statusCounts).sort(([,a],[,b]) => a - b);
                const sortedLabels = sortedStatusEntries.map(entry => entry[0]);
                const sortedData = sortedStatusEntries.map(entry => entry[1]);

                const statusData = {
                    labels: sortedLabels,
                    datasets: [{
                        label: 'Total de Leads',
                        data: sortedData,
                        backgroundColor: sortedLabels.map(s => getStatusChartColor(s)),
                        borderRadius: 4
                    }]
                };

                if(statusChartInstance) statusChartInstance.destroy();
                statusChartInstance = new Chart(document.getElementById('statusChart'), {
                    type: 'bar',
                    data: statusData,
                    options: {
                        indexAxis: 'y', 
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: { 
                                beginAtZero: true,
                                ticks: { color: '#4b5563', precision: 0 } 
                            },
                            y: { 
                                ticks: { color: '#4b5563' } 
                            }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: (c) => ` Leads: ${c.raw}`
                                }
                            }
                        }
                    }
                });
                
                // --- GRÁFICO DE INDICAÇÃO (PIZZA) ---
                const sourceCounts = data.reduce((acc, lead) => {
                    const indicacao = lead.indicacao || 'Não definido';
                    acc[indicacao] = (acc[indicacao] || 0) + 1;
                    return acc;
                }, {});
                const sourceData = {
                    labels: Object.keys(sourceCounts),
                    datasets: [{
                        data: Object.values(sourceCounts),
                        backgroundColor: ['#3b82f6', '#8b5cf6', '#ec4899', '#10b981', '#f97316', '#6366f1'],
                        borderColor: '#fff', borderWidth: 4
                    }]
                };
                if(sourceChartInstance) sourceChartInstance.destroy();
                sourceChartInstance = new Chart(document.getElementById('sourceChart'), { type: 'pie', data: sourceData, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { color: '#4b5563' } }, tooltip: tooltipPercentage } } });
                
                // --- GRÁFICO DE EFICÁCIA (BARRAS VERTICAIS) ---
                const sourceConversionData = {};
                data.forEach(lead => {
                    const source = lead.indicacao || 'Não definido';
                    if (!sourceConversionData[source]) sourceConversionData[source] = { total: 0, converted: 0 };
                    sourceConversionData[source].total++;
                    if ((lead.situacao || '').toLowerCase().includes('fechado')) sourceConversionData[source].converted++;
                });
                const sourceLabels = Object.keys(sourceConversionData);
                const conversionRates = sourceLabels.map(s => (sourceConversionData[s].total > 0 ? (sourceConversionData[s].converted / sourceConversionData[s].total) * 100 : 0));
                const sourceConversionChartData = {
                    labels: sourceLabels,
                    datasets: [{
                        label: 'Taxa de Conversão (%)',
                        data: conversionRates,
                        backgroundColor: '#22c55e',
                        borderColor: '#16a34a',
                        borderWidth: 1,
                        borderRadius: 4
                    }]
                };
                if(sourceConversionChartInstance) sourceConversionChartInstance.destroy();
                sourceConversionChartInstance = new Chart(document.getElementById('sourceConversionChart'), { type: 'bar', data: sourceConversionChartData, options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, scales: { x: { beginAtZero: true, max: 100, ticks: { color: '#4b5563', callback: (v) => `${v}%` } }, y: { ticks: { color: '#4b5563' } } }, plugins: { legend: { display: false }, tooltip: { callbacks: { label: (c) => `Conversão: ${c.raw.toFixed(1)}%` } } } } });
            }

            const renderTable = (data) => {
                tableResultsCount.textContent = `${data.length} resultado(s) encontrado(s).`;
                if (data.length === 0) {
                    tableBody.innerHTML = '';
                    noResultsDiv.classList.remove('hidden');
                    return;
                }
                noResultsDiv.classList.add('hidden');
                tableBody.innerHTML = data.map(lead => `<tr class="hover:bg-slate-50 transition-colors"><td class="p-4">${lead.data}</td><td class="p-4">${lead.consultor}</td><td class="p-4">${lead.indicacao}</td><td class="p-4"><span class="px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(lead.situacao)}">${lead.situacao}</span></td><td class="p-4">${lead.contato}</td><td class="p-4 text-center"><button class="text-brand-primary hover:text-brand-primary-dark" data-action="view" data-id="${lead.id}" title="Ver Observações"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z" /><path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.012 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" /></svg></button></td></tr>`).join('');
            };
            
            const applyFilters = () => {
                const consultor = filterConsultor.value;
                const situacao = filterSituacao.value;
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;
                const searchTerm = searchContactInput.value.trim();

                if (startDate) startDate.setUTCHours(0, 0, 0, 0);
                if (endDate) endDate.setUTCHours(23, 59, 59, 999);
                
                const filteredLeads = leads.filter(lead => 
                    (consultor ? lead.consultor === consultor : true) && 
                    (situacao ? (lead.situacao || '').toUpperCase() === situacao.toUpperCase() : true) && 
                    (!startDate || (lead.dateObject && lead.dateObject >= startDate)) && 
                    (!endDate || (lead.dateObject && lead.dateObject <= endDate)) &&
                    (searchTerm ? (lead.contato || '').includes(searchTerm) : true)
                );
                
                updateDashboard(filteredLeads, true);
            };
            
            const updateDashboard = (data, shouldUpdateTable = true) => {
                renderKpis(data);
                if (shouldUpdateTable) renderTable(data);
                if (searchContactInput.value.trim() === '') {
                    renderCharts(data);
                }
            }
            
            function closeModal(modal) { modal.classList.add('hidden'); }
            
            // --- EVENT LISTENERS ---
            
            filterBtn.addEventListener('click', applyFilters);
            searchContactInput.addEventListener('keyup', applyFilters);

            clearFilterBtn.addEventListener('click', () => {
                filterConsultor.value = '';
                filterSituacao.value = '';
                startDateInput.value = '';
                endDateInput.value = '';
                searchContactInput.value = '';
                updateDashboard(leads);
                renderCharts(leads);
            });

            refreshBtn.addEventListener('click', () => {
                initializeDashboard();
            });

            kpiContainer.addEventListener('click', (e) => {
                const kpiCard = e.target.closest('[data-filter-value]');
                if (!kpiCard) return;
                const filterValue = kpiCard.dataset.filterValue;
                if(filterValue === '') {
                    filterSituacao.value = '';
                } else {
                    const option = Array.from(filterSituacao.options).find(opt => opt.textContent.toLowerCase().includes(filterValue));
                    filterSituacao.value = option ? option.value : '';
                }
                applyFilters();
            });

            tableBody.addEventListener('click', (e) => {
                const button = e.target.closest('button[data-action="view"]');
                if (!button) return;
                const id = button.dataset.id;
                const leadToView = leads.find(l => l.id == id);
                if (leadToView) {
                    currentLeadInView = leadToView;
                    observationContent.textContent = leadToView.observacao || 'Nenhuma observação registada.';
                    geminiResultContainer.classList.add('hidden');
                    geminiResultContent.innerHTML = '';
                    observationModal.classList.remove('hidden');
                }
            });

            summarizeBtn.addEventListener('click', () => {
                if (currentLeadInView?.observacao) {
                    const prompt = `Resuma as seguintes observações de um lead comercial em 2 ou 3 pontos principais, em português. Seja conciso e direto:\n\n"${currentLeadInView.observacao}"`;
                    callGeminiAPI(prompt, geminiResultContainer, geminiLoader, geminiResultContent);
                } else {
                    geminiResultContent.textContent = 'Não há observações para resumir.';
                    geminiResultContainer.classList.remove('hidden');
                }
            });

            suggestBtn.addEventListener('click', () => {
                if (currentLeadInView) {
                    const prompt = `Aja como um gestor de vendas experiente. Para um lead com a situação "${currentLeadInView.situacao}" e as seguintes observações: "${currentLeadInView.observacao || 'Nenhuma observação anterior'}", sugira um próximo passo claro e acionável para o consultor. Responda em português.`;
                    callGeminiAPI(prompt, geminiResultContainer, geminiLoader, geminiResultContent);
                }
            });

            strategicAnalysisBtn.addEventListener('click', () => {
                strategicModal.classList.remove('hidden');
                const consultor = filterConsultor.value;
                const situacao = filterSituacao.value;
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;
                if (startDate) startDate.setUTCHours(0, 0, 0, 0);
                if (endDate) endDate.setUTCHours(23, 59, 59, 999);
                const dataToAnalyze = leads.filter(lead => (consultor ? lead.consultor === consultor : true) && (situacao ? (lead.situacao || '').toUpperCase() === situacao.toUpperCase() : true) && (!startDate || (lead.dateObject && lead.dateObject >= startDate)) && (!endDate || (lead.dateObject && lead.dateObject <= endDate)));

                if (dataToAnalyze.length === 0) {
                     strategicResultContent.textContent = "Não há dados de leads para analisar com os filtros atuais. Limpe os filtros ou selecione outro período.";
                     return;
                }
                const leadsDataForPrompt = dataToAnalyze.map(l => ` - Situação: ${l.situacao}, Indicação: ${l.indicacao}, Consultor: ${l.consultor}`).join('\n');
                const prompt = `Aja como um diretor de vendas. Analise os seguintes dados de uma equipe comercial.\n\nDados:\n${leadsDataForPrompt}\n\nCom base nestes dados, identifique:\n1. **Pontos Fortes:** Quais são as fontes de leads (indicação) mais eficazes ou as situações que estão a levar a bons resultados?\n2. **Pontos Fracos:** Onde é que o processo de vendas parece estar a falhar? Há algum padrão nos leads perdidos ou estagnados?\n3. **Sugestão Acionável:** Dê uma sugestão estratégica e clara para a equipe melhorar os seus resultados no próximo mês.\n\nResponda em português (Brasil) com uma formatação clara usando títulos para cada secção.`;
                callGeminiAPI(prompt, document.getElementById('strategic-content'), strategicLoader, strategicResultContent);
            });
            
            closeObservationBtn.addEventListener('click', () => closeModal(observationModal));
            observationModal.addEventListener('click', (e) => { if (e.target === observationModal) closeModal(observationModal); });
            
            closeStrategicBtn.addEventListener('click', () => closeModal(strategicModal));
            strategicModal.addEventListener('click', (e) => { if (e.target === strategicModal) closeModal(strategicModal); });
            
            consultantHelperBtn.addEventListener('click', () => {
                consultantHelperModal.classList.remove('hidden');
            });

            getSuggestionBtn.addEventListener('click', () => {
                const userQuery = consultantQueryInput.value;
                if (!userQuery.trim()) {
                    consultantHelperResultContent.innerHTML = '<p>Por favor, insira a dúvida do cliente no campo acima.</p>';
                    consultantHelperContent.classList.remove('hidden');
                    return;
                }
                
                const prompt = `Aja como um especialista sênior em assessoria para benefícios do INSS e seguros, com foco em clientes das classes C e D no Brasil. Seu objetivo é ajudar um consultor a superar objeções e responder a dúvidas de forma clara, simples e empática. A dúvida ou objeção do cliente é: "${userQuery}".\n\nForneça uma resposta estruturada para o consultor usar, com as seguintes seções:\n1. **Empatia e Validação:** Comece mostrando que entende a frustração ou a preocupação do cliente (ex: "Eu entendo perfeitamente sua preocupação com a demora...").\n2. **Argumento Principal:** Apresente a solução ou o contraponto, destacando o valor da assessoria (ex: "É exatamente por isso que nosso trabalho é importante...").\n3. **Exemplo ou Prova Social:** Use um exemplo prático ou mencione casos de sucesso para gerar confiança.\n4. **Fechamento:** Sugira o próximo passo ou faça uma pergunta para engajar o cliente e continuar a conversa.\n\nUse uma linguagem que se conecte com este público, evitando jargões técnicos e jurídicos.`;
                
                callGeminiAPI(prompt, consultantHelperContent, consultantHelperLoader, consultantHelperResultContent);
            });

            closeConsultantHelperBtn.addEventListener('click', () => closeModal(consultantHelperModal));
            consultantHelperModal.addEventListener('click', (e) => { if (e.target === consultantHelperModal) closeModal(consultantHelperModal); });

            exportPdfBtn.addEventListener('click', () => {
                const { jsPDF } = window.jspdf;
                const contentToExport = document.getElementById('strategic-result-content');
                const loader = document.getElementById('strategic-loader');

                if (!contentToExport.innerText.trim() || !loader.classList.contains('hidden')) {
                    alert('Por favor, espere a análise ser gerada antes de exportar.');
                    return;
                }

                html2canvas(contentToExport, { 
                    scale: 2,
                    useCORS: true 
                }).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');
                    const pdf = new jsPDF({
                        orientation: 'portrait',
                        unit: 'pt',
                        format: 'a4'
                    });
                    
                    const pdfWidth = pdf.internal.pageSize.getWidth();
                    const pdfHeight = pdf.internal.pageSize.getHeight();
                    const margin = 40; 
                    const contentWidth = pdfWidth - (margin * 2);
                    
                    const canvasWidth = canvas.width;
                    const canvasHeight = canvas.height;
                    const ratio = canvasWidth / canvasHeight;
                    const contentHeight = contentWidth / ratio;
                    
                    let position = margin;

                    pdf.setFont('Inter', 'normal');
                    pdf.setFontSize(20);
                    pdf.text('Análise Estratégica de Leads - ReVive', margin, margin);
                    position += 30;

                    if (position + contentHeight < pdfHeight - margin) {
                        pdf.addImage(imgData, 'PNG', margin, position, contentWidth, contentHeight);
                    } else {
                        console.warn("O conteúdo é muito grande para caber em uma única página e pode ser cortado.");
                        pdf.addImage(imgData, 'PNG', margin, position, contentWidth, 0); 
                    }

                    pdf.save('analise_estrategica_revive.pdf');
                }).catch(err => {
                    console.error("Erro ao gerar o PDF:", err);
                    alert("Ocorreu um erro ao tentar gerar o PDF.");
                });
            });

            // --- INICIALIZAÇÃO ---
            const initializeDashboard = async () => {
                const today = new Date();
                const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                const formatDate = (date) => {
                    const d = new Date(date);
                    let month = '' + (d.getMonth() + 1);
                    let day = '' + d.getDate();
                    const year = d.getFullYear();

                    if (month.length < 2) 
                        month = '0' + month;
                    if (day.length < 2) 
                        day = '0' + day;

                    return [year, month, day].join('-');
                }

                startDateInput.value = formatDate(firstDay);
                endDateInput.value = formatDate(lastDay);

                await fetchSheetData();
                applyFilters();
            };

            initializeDashboard();

        });
    </script>
</body>
</html>